#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_JAMOS 24
#define MAX_NAME 50
#define QUIZ_COUNT 5
#define MAX_ATTEMPTS 3
#define MAX_RESULTS 50

typedef struct {
    char hangul[10];
    char engAlphabet[5];
    char engPronunciation[20];
} HangulJamo;

typedef struct {
    char name[MAX_NAME];
    char challengeType[3]; // KE or EK
    int totalScore;
    int attemptCount;
} FlashcardResult;

HangulJamo jamos[MAX_JAMOS] = {
    {"ㄱ", "g", "giyeok"}, {"ㄴ", "n", "nieun"}, {"ㄷ", "d", "digeut"},
    {"ㄹ", "r", "rieul"}, {"ㅁ", "m", "mieum"}, {"ㅂ", "b", "bieup"},
    {"ㅅ", "s", "siot"}, {"ㅇ", "ng", "ieung"}, {"ㅈ", "j", "jieut"},
    {"ㅊ", "ch", "chieut"}, {"ㅋ", "k", "kieuk"}, {"ㅌ", "t", "tieut"},
    {"ㅍ", "p", "pieup"}, {"ㅎ", "h", "hieut"},
    {"ㅏ", "a", "a"}, {"ㅑ", "ya", "ya"}, {"ㅓ", "eo", "eo"},
    {"ㅕ", "yeo", "yeo"}, {"ㅗ", "o", "o"}, {"ㅛ", "yo", "yo"},
    {"ㅜ", "u", "u"}, {"ㅠ", "yu", "yu"}, {"ㅡ", "eu", "eu"},
    {"ㅣ", "i", "i"}
};

FlashcardResult results[MAX_RESULTS];
int resultCount = 0;

void shuffle(int *arr, int n) {
    for (int i = n - 1; i > 0; --i) {
        int j = rand() % (i + 1);
        int tmp = arr[i];
        arr[i] = arr[j];
        arr[j] = tmp;
    }
}

void playKor2EngGame(char *name) {
    int indexes[MAX_JAMOS];
    for (int i = 0; i < MAX_JAMOS; i++) indexes[i] = i;
    shuffle(indexes, MAX_JAMOS);

    int score = 0;

    printf("\n[Hangul ➜ English] Quiz\n");
    for (int i = 0; i < QUIZ_COUNT; i++) {
        int idx = indexes[i];
        printf("Q%d. What is the English alphabet and pronunciation for '%s'? (Format: alphabet,pronunciation): ", i + 1, jamos[idx].hangul);

        char input[50];
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;

        char alpha[10], pron[20];
        sscanf(input, "%[^,],%s", alpha, pron);

        if (strcmp(alpha, jamos[idx].engAlphabet) == 0 && strcmp(pron, jamos[idx].engPronunciation) == 0) {
            printf("Correct!\n");
            score += 10;
        } else {
            printf("Wrong! Correct: %s,%s\n", jamos[idx].engAlphabet, jamos[idx].engPronunciation);
        }
    }

    results[resultCount++] = (FlashcardResult){ .name = "", .totalScore = score, .attemptCount = 1 };
    strcpy(results[resultCount - 1].name, name);
    strcpy(results[resultCount - 1].challengeType, "KE");

    printf("Quiz Over. Score: %d / 50\n\n", score);
}

void playEng2KorGame(char *name) {
    int indexes[MAX_JAMOS];
    for (int i = 0; i < MAX_JAMOS; i++) indexes[i] = i;
    shuffle(indexes, MAX_JAMOS);

    int score = 0;

    printf("\n[English ➜ Hangul] Quiz\n");
    for (int i = 0; i < QUIZ_COUNT; i++) {
        int idx = indexes[i];
        printf("Q%d. What is the Hangul character for '%s (%s)'? ", i + 1, jamos[idx].engAlphabet, jamos[idx].engPronunciation);

        char input[10];
        fgets(input, sizeof(input), stdin);
        input[strcspn(input, "\n")] = 0;

        if (strcmp(input, jamos[idx].hangul) == 0) {
            printf("Correct!\n");
            score += 10;
        } else {
            printf("Wrong! Correct: %s\n", jamos[idx].hangul);
        }
    }

    results[resultCount++] = (FlashcardResult){ .name = "", .totalScore = score, .attemptCount = 1 };
    strcpy(results[resultCount - 1].name, name);
    strcpy(results[resultCount - 1].challengeType, "EK");

    printf("Quiz Over. Score: %d / 50\n\n", score);
}

void showResult() {
    if (resultCount == 0) {
        printf("No results available.\n");
        return;
    }

    // Sort by challengeType (simple bubble sort for demonstration)
    for (int i = 0; i < resultCount - 1; i++) {
        for (int j = i + 1; j < resultCount; j++) {
            if (strcmp(results[i].challengeType, results[j].challengeType) > 0) {
                FlashcardResult tmp = results[i];
                results[i] = results[j];
                results[j] = tmp;
            }
        }
    }

    printf("\n--- Learner Results ---\n");
    for (int i = 0; i < resultCount; i++) {
        printf("%d. %s | Challenge: %s | Score: %d | Attempts: %d\n",
               i + 1, results[i].name, results[i].challengeType, results[i].totalScore, results[i].attemptCount);
    }
    printf("------------------------\n");
}

void learnHangul() {
    char name[MAX_NAME];
    printf("Enter the name of a Millieways trainee: ");
    fgets(name, sizeof(name), stdin);
    name[strcspn(name, "\n")] = 0;

    int choice;
    do {
        printf("\n-- Hangul Jamo Learning --\n");
        printf("1. Hangul to English\n");
        printf("2. English to Hangul\n");
        printf("3. View Results\n");
        printf("0. Exit to Main Menu\n");
        printf("Choose an option: ");
        scanf("%d", &choice);
        getchar(); // consume newline

        switch (choice) {
            case 1:
                playKor2EngGame(name);
                break;
            case 2:
                playEng2KorGame(name);
                break;
            case 3:
                showResult();
                break;
            case 0:
                printf("Returning to main menu...\n");
                break;
            default:
                printf("Invalid option.\n");
        }
    } while (choice != 0);
}

int main() {
    srand((unsigned int)time(NULL));
    learnHangul();
    return 0;
}
