#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_TITLE 50
#define MAX_DATE 12
#define MAX_FIELD 30
#define MAX_QUALIFICATIONS 5
#define MAX_SN 5

typedef struct {
    int id;
    char title[MAX_TITLE];
    char postingDate[MAX_DATE];
    char deadline[MAX_DATE];
} JobAdSummary;

typedef struct {
    int numberOfHires;
    char jobField[MAX_FIELD];
    char qualifications[MAX_QUALIFICATIONS][100];
    int qualificationCount;
} JobAdDetails;

typedef struct {
    char name[20];
    char apiKey[30];
    char apiUrl[100];
} SocialNetwork;

JobAdSummary jobSummaries[100];
JobAdDetails jobDetails[100];
int jobCount = 0;

SocialNetwork socialNetworks[MAX_SN] = {
    {"Facebook", "FB123", "https://api.facebook.com/post"},
    {"Instagram", "IG456", "https://api.instagram.com/post"},
    {"Thread", "TH789", "https://api.thread.com/post"},
    {"LinkedIn", "LN101", "https://api.linkedin.com/post"},
    {"X", "X202", "https://api.x.com/post"}
};

void createJobPosting() {
    if (jobCount >= 100) {
        printf("Cannot add more job postings.\n");
        return;
    }

    JobAdSummary *summary = &jobSummaries[jobCount];
    JobAdDetails *details = &jobDetails[jobCount];

    summary->id = jobCount + 1;

    printf("Enter job title (max %d chars): ", MAX_TITLE);
    fgets(summary->title, MAX_TITLE, stdin);
    summary->title[strcspn(summary->title, "\n")] = '\0';

    printf("Enter posting date (YYYY-MM-DD): ");
    fgets(summary->postingDate, MAX_DATE, stdin);
    summary->postingDate[strcspn(summary->postingDate, "\n")] = '\0';

    printf("Enter deadline (YYYY-MM-DD): ");
    fgets(summary->deadline, MAX_DATE, stdin);
    summary->deadline[strcspn(summary->deadline, "\n")] = '\0';

    printf("Enter number of hires: ");
    scanf("%d", &details->numberOfHires);
    getchar(); // Consume newline

    printf("Enter job field: ");
    fgets(details->jobField, MAX_FIELD, stdin);
    details->jobField[strcspn(details->jobField, "\n")] = '\0';

    printf("Enter number of qualifications: ");
    scanf("%d", &details->qualificationCount);
    getchar();

    if (details->qualificationCount > MAX_QUALIFICATIONS) {
        printf("Limit exceeded. Setting to max (%d).\n", MAX_QUALIFICATIONS);
        details->qualificationCount = MAX_QUALIFICATIONS;
    }

    for (int i = 0; i < details->qualificationCount; i++) {
        printf("Qualification %d: ", i + 1);
        fgets(details->qualifications[i], 100, stdin);
        details->qualifications[i][strcspn(details->qualifications[i], "\n")] = '\0';
    }

    jobCount++;
    printf("Job posting created successfully! ID: %d\n", summary->id);
}

void viewJobPostings() {
    if (jobCount == 0) {
        printf("No job postings available. Redirecting to creation...\n");
        createJobPosting();
        return;
    }

    printf("\n--- Job Postings ---\n");
    for (int i = 0; i < jobCount; i++) {
        printf("ID: %d | Title: %s | Date: %s | Deadline: %s\n",
               jobSummaries[i].id, jobSummaries[i].title,
               jobSummaries[i].postingDate, jobSummaries[i].deadline);
    }

    int id;
    printf("Enter job ID to view details (0 to cancel): ");
    scanf("%d", &id);
    getchar();

    if (id <= 0 || id > jobCount) return;

    JobAdDetails *details = &jobDetails[id - 1];
    printf("\n--- Details for Job ID %d ---\n", id);
    printf("Field: %s\n", details->jobField);
    printf("Hires: %d\n", details->numberOfHires);
    printf("Qualifications:\n");
    for (int i = 0; i < details->qualificationCount; i++) {
        printf(" - %s\n", details->qualifications[i]);
    }
}

void postToSocialMedia() {
    if (jobCount == 0) {
        printf("No job postings to share. Please create one first.\n");
        return;
    }

    printf("\nSelect a social network to post:\n");
    for (int i = 0; i < MAX_SN; i++) {
        printf("%d. %s\n", i + 1, socialNetworks[i].name);
    }
    printf("Choice: ");
    int choice;
    scanf("%d", &choice);
    getchar();

    if (choice < 1 || choice > MAX_SN) {
        printf("Invalid selection.\n");
        return;
    }

    printf("Enter Job ID to post: ");
    int id;
    scanf("%d", &id);
    getchar();

    if (id <= 0 || id > jobCount) {
        printf("Invalid job ID.\n");
        return;
    }

    SocialNetwork *sn = &socialNetworks[choice - 1];
    printf("\nPosting to %s...\n", sn->name);
    printf("POST Data:\n");
    printf("Job ID: %d\n", id);
    printf("API Key: %s\n", sn->apiKey);
    printf("API URL: %s\n", sn->apiUrl);
    printf("Status: âœ… Successfully posted (stub).\n");
}

void findSpecialist() {
    int option;
    do {
        printf("\n[Finding People - Menu]\n");
        printf("1. Create Job Posting\n");
        printf("2. View Job Postings\n");
        printf("3. Post on Social Networks\n");
        printf("4. Exit\n");
        printf("Select: ");
        scanf("%d", &option);
        getchar(); // Consume newline

        switch (option) {
            case 1: createJobPosting(); break;
            case 2: viewJobPostings(); break;
            case 3: postToSocialMedia(); break;
            case 4: printf("Returning to main menu...\n"); break;
            default: printf("Invalid option.\n"); break;
        }
    } while (option != 4);
}

int main() {
    printf("Welcome to the Visual & Image Training System\n");
    findSpecialist(); // Entry point for Problem 0701
    return 0;
}
