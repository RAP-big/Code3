#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include "stage8.h"

// XOR encryption function
void encryptData(char *data, const char *key) {
    size_t data_len = strlen(data);
    size_t key_len = strlen(key);
    for (size_t i = 0; i < data_len; ++i) {
        data[i] ^= key[i % key_len];
    }
}

// XOR decryption function (same as encryption)
void decryptData(char *data, const char *key) {
    encryptData(data, key); // XOR encryption and decryption are identical
}

// Save artist information to a file
void saveArtistsToFile(const Artist artists[], int count, const char *filename) {
    FILE *file = fopen(filename, "wb");
    if (!file) {
        perror("Failed to open file for writing");
        return;
    }
    fwrite(&count, sizeof(int), 1, file);
    fwrite(artists, sizeof(Artist), count, file);
    fclose(file);
}

// Load artist information from a file
int loadArtistsFromFile(Artist artists[], const char *filename) {
    FILE *file = fopen(filename, "rb");
    if (!file) {
        perror("Failed to open file for reading");
        return 0;
    }
    int count;
    fread(&count, sizeof(int), 1, file);
    fread(artists, sizeof(Artist), count, file);
    fclose(file);
    return count;
}

// Display all artists' names and nicknames
void displayArtists(const Artist artists[], int count) {
    printf("\nList of Artists:\n");
    for (int i = 0; i < count; ++i) {
        printf("%d. %s (%s)\n", i + 1, artists[i].name, artists[i].nickname);
    }
}

// Display detailed information of a specific artist
void displayArtistInfo(const Artist *artist) {
    printf("\nArtist Information:\n");
    printf("Name: %s\n", artist->name);
    printf("Nickname: %s\n", artist->nickname);
    printf("Date of Birth: %s\n", artist->dob);
    printf("Gender: %s\n", artist->gender);
    printf("Education: %s\n", artist->education);
    printf("Phone: %s\n", artist->phone);
    printf("Email: %s\n", artist->email);
    printf("Nationality: %s\n", artist->nationality);
    printf("Height: %s\n", artist->height);
    printf("Weight: %s\n", artist->weight);
    printf("Blood Type: %s\n", artist->blood_type);
    printf("Allergies: %s\n", artist->allergies);
    printf("SNS: %s\n", artist->sns);
}

// Function to protect artist data
void protectMyData() {
    Artist artists[MAX_ARTISTS];
    int artist_count = 0;
    char key[MAX_NAME_LENGTH];

    printf("Enter encryption key: ");
    fgets(key, sizeof(key), stdin);
    key[strcspn(key, "\n")] = '\0'; // Remove newline character

    printf("Enter number of artists: ");
    scanf("%d", &artist_count);
    getchar(); // Consume newline character

    for (int i = 0; i < artist_count; ++i) {
        printf("\nEnter information for artist %d:\n", i + 1);
        printf("Name: ");
        fgets(artists[i].name, sizeof(artists[i].name), stdin);
        artists[i].name[strcspn(artists[i].name, "\n")] = '\0';

        printf("Nickname: ");
        fgets(artists[i].nickname, sizeof(artists[i].nickname), stdin);
        artists[i].nickname[strcspn(artists[i].nickname, "\n")] = '\0';

        printf("Date of Birth: ");
        fgets(artists[i].dob, sizeof(artists[i].dob), stdin);
        artists[i].dob[strcspn(artists[i].dob, "\n")] = '\0';

        printf("Gender: ");
        fgets(artists[i].gender, sizeof(artists[i].gender), stdin);
        artists[i].gender[strcspn(artists[i].gender, "\n")] = '\0';

        printf("Education: ");
        fgets(artists[i].education, sizeof(artists[i].education), stdin);
        artists[i].education[strcspn(artists[i].education, "\n")] = '\0';

        printf("Phone: ");
        fgets(artists[i].phone, sizeof(artists[i].phone), stdin);
        artists[i].phone[strcspn(artists[i].phone, "\n")] = '\0';
        encryptData(artists[i].phone, key);

        printf("Email: ");
        fgets(artists[i].email, sizeof(artists[i].email), stdin);
        artists[i].email[strcspn(artists[i].email, "\n")] = '\0';
        encryptData(artists[i].email, key);

        printf("Nationality: ");
        fgets(artists[i].nationality, sizeof(artists[i].nationality), stdin);
        artists[i].nationality[strcspn(artists[i].nationality, "\n")] = '\0';

        printf("Height: ");
        fgets(artists[i].height, sizeof(artists[i].height), stdin);
        artists[i].height[strcspn(artists[i].height, "\n")] = '\0';

        printf("Weight: ");
        fgets(artists[i].weight, sizeof(artists[i].weight), stdin);
        artists[i].weight[strcspn(artists[i].weight, "\n")] = '\0';

        printf("Blood Type: ");
        fgets(artists[i].blood_type, sizeof(artists[i].blood_type), stdin);
        artists[i].blood_type[strcspn(artists[i].blood_type, "\n")] = '\0';

        printf("Allergies: ");
        fgets(artists[i].allergies, sizeof(artists[i].allergies), stdin);
        artists[i].allergies[strcspn(artists[i].allergies, "\n")] = '\0';
        encryptData(artists[i].allergies, key);

        printf("SNS: ");
        fgets(artists[i].sns, sizeof(artists[i].sns), stdin);
        artists[i].sns[strcspn(artists[i].sns, "\n")] = '\0';
    }

    saveArtistsToFile(artists, artist_count, "artists.dat");
    printf("\nArtist data has been encrypted and saved.\n");

    displayArtists(artists, artist_count);

    printf("\nEnter the number of the artist to view details: ");
    int artist_index;
    scanf("%d", &artist_index);
    getchar(); // Consume newline character

    if (artist_index < 1 || artist_index > artist_count) {
        printf("Invalid selection.\n");
        return;
    }

    Artist *selected_artist = &artists[artist_index - 1];
    displayArtistInfo(selected_artist);

    printf("\nWould you like to decrypt this artist's information? (y/n): ");
    char choice;
    scanf(" %c", &choice);
    getchar(); // Consume newline character

    if (choice == 'y' || choice == 'Y') {
        char decrypt_key[MAX_NAME_LENGTH];
        printf("Enter decryption key: ");
        fgets(decrypt_key, sizeof(decrypt_key), stdin);
        decrypt_key[strcspn(decrypt_key, "\n")] = '\0';

        if (strcmp(decrypt_key, key) == 0) {
            decryptData(selected_artist->phone, key);
            decryptData(selected_artist->email, key);
            decryptData(selected_artist->allergies, key);
            displayArtistInfo(selected_artist);
        } else {
            printf("Incorrect decryption key.\n");
        }
    }
}
