#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>

#define MAX_TRAINEES 5
#define MAX_SENTENCES 10
#define MAX_WORDS 20
#define MAX_LEN 100
#define QUIZ_QUESTIONS 5

typedef struct {
    char english[MAX_LEN];
    char korean[MAX_LEN];
} Sentence;

typedef struct {
    char nickname[MAX_LEN];
    int score;
    int hasPlayed;
} Score;

Sentence sentences[MAX_SENTENCES] = {
    {"I eat an apple.", "나는 사과를 먹는다."},
    {"She goes to school.", "그녀는 학교에 간다."},
    {"They are playing soccer.", "그들은 축구를 하고 있다."},
    {"We study Korean grammar.", "우리는 한국어 문법을 공부한다."},
    {"He reads a book every day.", "그는 매일 책을 읽는다."},
    {"The cat is sleeping on the bed.", "고양이는 침대 위에서 자고 있다."},
    {"The students listen to the teacher.", "학생들은 선생님의 말을 듣는다."},
    {"I am watching a movie now.", "나는 지금 영화를 보고 있다."},
    {"She is writing a letter.", "그녀는 편지를 쓰고 있다."},
    {"We eat together at dinner.", "우리는 저녁에 함께 먹는다."}
};

Score learners[MAX_TRAINEES] = {
    {"Arthur", 0, 0},
    {"Youngjin", 0, 0},
    {"Luna", 0, 0},
    {"Kai", 0, 0},
    {"Soojin", 0, 0}
};

void shuffleWords(char* sentence, char words[MAX_WORDS][MAX_LEN], int* wordCount) {
    char temp[MAX_LEN];
    strcpy(temp, sentence);

    char* token = strtok(temp, " ");
    int count = 0;
    while (token) {
        strcpy(words[count++], token);
        token = strtok(NULL, " ");
    }

    // Fisher-Yates shuffle
    for (int i = count - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        char tempWord[MAX_LEN];
        strcpy(tempWord, words[i]);
        strcpy(words[i], words[j]);
        strcpy(words[j], tempWord);
    }

    *wordCount = count;
}

void composeSentences(Score* learner) {
    int used[MAX_SENTENCES] = {0};
    int score = 0;

    printf("\n[Compose Korean Sentences - 5 Questions]\n");

    for (int i = 0; i < QUIZ_QUESTIONS; i++) {
        int idx;
        do {
            idx = rand() % MAX_SENTENCES;
        } while (used[idx]);
        used[idx] = 1;

        char shuffledWords[MAX_WORDS][MAX_LEN];
        int wordCount;
        shuffleWords(sentences[idx].korean, shuffledWords, &wordCount);

        printf("\nQ%d. Translate: %s\n", i + 1, sentences[idx].english);
        printf("Korean words (shuffled): ");
        for (int j = 0; j < wordCount; j++) {
            printf("%s ", shuffledWords[j]);
        }
        printf("\nCompose the correct Korean sentence:\n> ");

        char userInput[MAX_LEN];
        fgets(userInput, sizeof(userInput), stdin);
        userInput[strcspn(userInput, "\n")] = '\0';

        if (strcmp(userInput, sentences[idx].korean) == 0) {
            printf("✅ Correct!\n");
            score += 20;
        } else {
            printf("❌ Incorrect! Answer: %s\n", sentences[idx].korean);
        }
    }

    learner->score += score;
    learner->hasPlayed = 1;
    printf("\nTotal score for this session: %d\n", score);
}

void printScore(Score* learner) {
    if (!learner->hasPlayed) {
        printf("\nPlease complete a quiz before checking scores.\n");
        return;
    }

    printf("\n--- Your Score ---\n");
    printf("%s: %d points\n", learner->nickname, learner->score);

    printf("\n--- All Rankings ---\n");
    // Simple bubble sort by score (descending)
    for (int i = 0; i < MAX_TRAINEES - 1; i++) {
        for (int j = i + 1; j < MAX_TRAINEES; j++) {
            if (learners[j].score > learners[i].score) {
                Score tmp = learners[i];
                learners[i] = learners[j];
                learners[j] = tmp;
            }
        }
    }

    for (int i = 0; i < MAX_TRAINEES; i++) {
        printf("%d. %s - %d points\n", i + 1, learners[i].nickname, learners[i].score);
    }
}

void learnKoreanGrammar() {
    char nickname[MAX_LEN];
    Score* current = NULL;

    for (int tries = 0; tries < 3; tries++) {
        printf("Enter your nickname: ");
        fgets(nickname, sizeof(nickname), stdin);
        nickname[strcspn(nickname, "\n")] = '\0';

        for (int i = 0; i < MAX_TRAINEES; i++) {
            if (strcmp(learners[i].nickname, nickname) == 0) {
                current = &learners[i];
                break;
            }
        }

        if (current != NULL) break;
        printf("Nickname not found. Try again.\n");
    }

    if (!current) {
        printf("3 failed attempts. Exiting Korean grammar training.\n");
        return;
    }

    int choice;
    do {
        printf("\n[Learning Korean Grammar - %s]\n", current->nickname);
        printf("1. Compose Korean Sentences\n");
        printf("2. Check Scores\n");
        printf("0. Exit\n");
        printf("Choose an option: ");
        scanf("%d", &choice);
        getchar(); // clear newline

        switch (choice) {
            case 1:
                composeSentences(current);
                break;
            case 2:
                printScore(current);
                break;
            case 0:
                printf("Exiting grammar training.\n");
                break;
            default:
                printf("Invalid choice.\n");
        }
    } while (choice != 0);
}

int main() {
    srand(time(NULL));
    learnKoreanGrammar();
    return 0;
}
